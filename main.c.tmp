/*******************************************************************************
 * (c) Copyright 2012-2013 Microsemi SoC Products Group.  All rights reserved.
 *
 * This example project demonstrates the use of the SmartFusion2 In System
 * Programming (ISP) using USB driver.
 *
 * This example uses the USB driver in USB Device mode with MSC class. When
 * SmartFusion2 is connected to host PC through USB micro-AB connector, it will
 * appear as a removable mass storage drive. You can drag and drop the
 * programming file onto this drive which will then be used to program SmartFusion2.
 * The programming file must be stored on the root directory of this drive.
 * Multiple programming files can be copied on the drive.
 *
 * For more information on how to use this project, please refer README.TXT in
 * this project's folder.
 *
 * SVN $Revision: 5926 $
 * SVN $Date: 2013-11-04 09:14:40 +0000 (Mon, 04 Nov 2013) $
 */
#include "drivers/mss_sys_services/mss_sys_services.h"
#include "drivers/mss_uart/mss_uart.h"
#include "drivers/at25df641/at25df641.h"
#include "flash_drive_app.h"
//#include "FAT/src/ff.h"
//#include "FAT/src/diskio.h"

/*-----------------------------------------------------------------------------
 * Macros
*/
#define PAGE_LENGTH         512                 //4096
#define SCAN_FILE           0x31u
#define GET_FILE_NAME       0x32u
#define AUTHENTICATE        0x33u
#define PROGRAM             0x34u
#define VERIFY              0x35u
#define HELP                0x36u
#define IDLE                0x37u

#define NB_NIBBLES_IN_INT   8

/*-----------------------------------------------------------------------------
 * Local functions.
 */
void init_system(void);
//void Init_FS(void);
static uint32_t page_read_handler(uint8_t const **);
static void isp_completion_handler(uint32_t isp_exit_status);
static uint32_t read_page(uint8_t* g_pageb, uint32_t length);
static void display_greeting(void);
//FRESULT scan_files(char* path);
//void get_file_name(void);
void action_menu(void);
void press_any_key(void);
void display_help(void);
uint32_t int_to_hex_int(uint32_t value,
                        uint8_t * p_result,
                        uint32_t result_size);

/*-----------------------------------------------------------------------------
 * Global Variables.
 */
/*
uint8_t file_spi[50];
FATFS fs[1];
FIL fdst;
*/
uint32_t g_bytes_read;
uint8_t res;
static volatile uint32_t g_isp_in_progress = 0u;
static uint8_t g_page_buffer[PAGE_LENGTH];
static uint32_t file_opened = 0u;
uint8_t action_code = IDLE;


uint8_t tx1_data[] = {"\r\nEnter desired action to perform in the below mentioned sequence: \
                       \r\n1. Display list of .spi files available on root directory \r\n2. Select the file name for programming \
                       \r\n3. Authenticate device \
                       \r\n4. Program device \
                       \r\n5. Verify device \
                       \r\n6. Help \
                       \r\nEnter valid selection [1-6]: "};
/*==============================================================================
  Main function.
 */
int main()
{

    SYSREG->WDOG_CR = 0x0000;        /*Disable Watch-dog*/

    init_system();

    FLASH_DRIVE_init();

    //Init_FS();

    display_greeting();

    MSS_UART_polled_tx (&g_mss_uart0, tx1_data,sizeof(tx1_data));

    while(1)
    {

    	action_menu();
        MSS_SYS_init(MSS_SYS_NO_EVENT_HANDLER);

        switch (action_code)
        {
            case SCAN_FILE:
                //scan_files("/..");
                //press_any_key();
            	  MSS_UART_polled_tx_string( &g_mss_uart0, (const uint8_t *)"\r\nNo support for the moment...\r\n");
            	  press_any_key();
            break;

            case GET_FILE_NAME:
            	/*
                get_file_name();
                if(!file_opened)
               {
                    res = f_open(&fdst, (char const *)file_spi, FA_OPEN_EXISTING | FA_READ);
                    if(res)
                    {
                        file_opened = 0u;
                        MSS_UART_polled_tx_string( &g_mss_uart0, (const uint8_t *)"\r\nCan not open the requested file\r\n");
                    }
                    else
                    {
                        file_opened = 1u;
                        MSS_UART_polled_tx_string( &g_mss_uart0, (const uint8_t *)"\r\nFile Opened\r\n");
                    }
                }
                */
            	MSS_UART_polled_tx_string( &g_mss_uart0, (const uint8_t *)"\r\nNo support for the moment...\r\n");
                press_any_key();
            break;

            case AUTHENTICATE:
                MSS_UART_polled_tx_string( &g_mss_uart0, (const uint8_t *)"\r\nPerforming authentication.  Please wait...\r\n");
                g_isp_in_progress = 1u;
                MSS_SYS_start_isp(MSS_SYS_PROG_AUTHENTICATE, page_read_handler, isp_completion_handler);
                while(g_isp_in_progress)  {;}
                //f_lseek(&fdst, 0);
                press_any_key();
            break;

            case PROGRAM:
                MSS_UART_polled_tx_string( &g_mss_uart0, (const uint8_t *)"\r\nPerforming programming.  Please wait...\r\n");
                g_isp_in_progress = 1u;
                MSS_SYS_start_isp(MSS_SYS_PROG_PROGRAM, page_read_handler, isp_completion_handler);
                while(g_isp_in_progress)  {;}
                //f_lseek(&fdst, 0);
                press_any_key();
            break;

            case VERIFY:
                MSS_UART_polled_tx_string( &g_mss_uart0, (const uint8_t *)"\r\nPerforming verification.  Please wait...\r\n");
                g_isp_in_progress = 1u;
                MSS_SYS_start_isp(MSS_SYS_PROG_VERIFY, page_read_handler, isp_completion_handler);
                while(g_isp_in_progress)  {;}
                //f_lseek(&fdst, 0);
                press_any_key();
            break;

            case IDLE:
            break;

            case HELP:
                display_help();
            break;

            default:
                MSS_UART_polled_tx_string( &g_mss_uart0, (const uint8_t *)"\r\nError: Invalid action. ");
                press_any_key();
        }

    }
}

/*
 *****************************************************************************
*/
void init_system()
{
    // Initialize and configure UART0. //
    MSS_UART_init
    (
        &g_mss_uart0,
        MSS_UART_115200_BAUD,
        MSS_UART_DATA_8_BITS | MSS_UART_NO_PARITY | MSS_UART_ONE_STOP_BIT
    );
}

/*
 *****************************************************************************
*/
/*
void Init_FS()
{
    long p2;
    FATFS *fatfs;

    // File System  on SPI Flash Init //
    if (disk_initialize(0))
    {
        MSS_UART_polled_tx_string( &g_mss_uart0, (const uint8_t *)"Disk Initialization Failed: SPI interface Error: \n\r" );
    }
    else
    {
        f_mount(0, &fs[0]);

        if(f_getfree("0:", (DWORD*)&p2, &fatfs))
        {
            // Create the File System //
            if (f_mkfs(0, 0, 512))
            {
                MSS_UART_polled_tx_string( &g_mss_uart0, (const uint8_t *)"File System Cannot be created: \n\r" );
            }
        }
    }
}
*/
/*------------------------------------------------------------------------------
  This function will be called when the ISP operation completes. The parameter
  indicates the outcome of the ISP operation.
 */

static void isp_completion_handler
(
    uint32_t isp_exit_status
)
{
    uint8_t value_text[50];
    uint32_t text_size;

    MSS_UART_polled_tx_string(&g_mss_uart0,(const uint8_t*)"\r\nExit status = ");
    text_size = int_to_hex_int(isp_exit_status, value_text, 8);
    MSS_UART_polled_tx (&g_mss_uart0, value_text, text_size);
    g_isp_in_progress = 0;
}

/*------------------------------------------------------------------------------
  This function will be called by the system services driver to get a bitsream
  page.
 */


static uint32_t page_read_handler
(
    uint8_t const ** pp_next_page
)
{
    uint32_t remaining_length;

    remaining_length = read_page(g_page_buffer, PAGE_LENGTH);
    *pp_next_page = g_page_buffer;

    return remaining_length;
}

/*------------------------------------------------------------------------------
  Dummy page read function. This reads from a global buffer to mimick comms port
  or storage reads.
 */

static uint32_t read_page
(
    uint8_t * g_page_buffer,
    uint32_t length
)
{
    if(file_opened)
    {
        res = f_read(&fdst, g_page_buffer, PAGE_LENGTH,(UINT *)&g_bytes_read);
        if((res || g_bytes_read) == 0)
        {

        }
        else
        {
            MSS_UART_polled_tx_string(&g_mss_uart0,(const uint8_t*)".");
        }
    }
    return g_bytes_read;
}

/*------------------------------------------------------------------------------
  Display greeting message when application is started.
 */

static void display_greeting(void)
{
    MSS_UART_polled_tx_string(&g_mss_uart0,(const uint8_t*)"\n\r\n\r**********************************************************************\n\r" );
    MSS_UART_polled_tx_string(&g_mss_uart0,(const uint8_t*)"************ SmartFusion2 In System Programming Example **************\n\r" );
    MSS_UART_polled_tx_string(&g_mss_uart0,(const uint8_t*)"**********************************************************************\n\r" );
    MSS_UART_polled_tx_string(&g_mss_uart0,(const uint8_t*)" This Example project will provide following options to user:  \n\r");
    MSS_UART_polled_tx_string(&g_mss_uart0,(const uint8_t*)" 1. To store the bit stream (.spi file) on to SPI-Flash using USB-Mass\n\r");
    MSS_UART_polled_tx_string(&g_mss_uart0,(const uint8_t*)"    Storage Device Driver.\n\r");
    MSS_UART_polled_tx_string(&g_mss_uart0,(const uint8_t*)" 2. Select bit stream file for programming from the Root directory of \n\r");
    MSS_UART_polled_tx_string(&g_mss_uart0,(const uint8_t*)"    the drive and display for user to select .spi file\n\r" );
    MSS_UART_polled_tx_string(&g_mss_uart0,(const uint8_t*)" 3. Performs Programming activity. \n\r" );
    MSS_UART_polled_tx_string(&g_mss_uart0,(const uint8_t*)"----------------------------------------------------------------------\n\r" );
}

/*------------------------------------------------------------------------------
  Scan for .spi files in the root directory and display on hyper-terminal
 */

FRESULT scan_files(char* path)
{
    FRESULT res;
    FILINFO fno;
    DIR dir;
    uint8_t flag=0;
    int k;

    res = f_opendir(&dir, path);
    if (res == FR_OK)
    {
        MSS_UART_polled_tx_string( &g_mss_uart0, (const uint8_t *)"\r\n---------------------------------------------------------------------- \r\n" );
        MSS_UART_polled_tx_string( &g_mss_uart0, (const uint8_t *)"\n\rList of .SPI files in Root Directory: " );
        for (;;)
        {
            res = f_readdir(&dir, &fno);                   // Read a directory item //
            if (res != FR_OK || fno.fname[0] == 0) break;  // Break on error or end of dir //
            if (fno.fname[0] == '.') continue;             // Ignore dot entry //

            if (fno.fattrib & AM_DIR)
            {
                // It is a directory //
            }
            else
            {
                // It is a file. //
                k = 0;
                // Is this file of type .spi//
                while(fno.fname[k] != '\0')
                {
                    if(fno.fname[k] == '.')
                    {
                        if(((fno.fname[k+1] == 'S') | (fno.fname[k+1] == 's')) \
                          &((fno.fname[k+2] == 'P') | (fno.fname[k+2] == 'p')) \
                          &((fno.fname[k+3] == 'I') | (fno.fname[k+3] == 'i')) \
                          &(fno.fname[k+4] == '\0'))
                       {
                           flag = 1;
                           break;
                       }
                  }
                  else
                  {
                  }
                  k++;
                }
                k = 0;
                if(flag == 1)
                // Display .spi files //
                {
                    flag = 0;
                    MSS_UART_polled_tx_string( &g_mss_uart0, (const uint8_t *)"\n\rFile Name: \t" );
                    while(fno.fname[k] != '\0')
                    {
                        MSS_UART_polled_tx (&g_mss_uart0, (uint8_t const *)&fno.fname[k], 1);
                        k++;
                    }
                }
            }
        }
        MSS_UART_polled_tx_string(&g_mss_uart0, (const uint8_t *)"\r\n---------------------------------------------------------------------- \r\n" );
    }
    return res;
}


/*------------------------------------------------------------------------------
  Get the file name to read from SPI-FLASH
 */

void get_file_name(void)
{
    uint8_t tx_data[] = {"\r\nEnter the file name to read bit stream from SPI memory device: "};
    uint8_t rx_data = 0;
    uint8_t rx_size = 0;
    uint8_t index = 0;
    uint8_t done = 0;

    MSS_UART_polled_tx_string( &g_mss_uart0, (const uint8_t *)"\r\n---------------------------------------------------------------------- \r\n" );
    MSS_UART_polled_tx (&g_mss_uart0, tx_data,sizeof(tx_data));

    index = 0;
    while (!done)
    {
        do {
            rx_size = MSS_UART_get_rx(&g_mss_uart0, &rx_data, 1);
        } while(rx_size == 0);
        if ((rx_data == '\r') || (rx_data == '\n'))
        {
            done = 1;
        }
        else if (rx_data == 8)
        {
            index--;
        }
        else
        {
            file_spi[index]=rx_data;
            MSS_UART_polled_tx (&g_mss_uart0, &file_spi[index], 1);
            index++;
        }
    }
    file_spi[index] = '\0';
}

/*------------------------------------------------------------------------------
  Display action to be perform by Application
 */


void action_menu(void)
{
    uint8_t rx_data = 0;
    uint8_t rx_size = 0;

    rx_size = MSS_UART_get_rx(&g_mss_uart0, &rx_data,1);

    if (((rx_data < '1') || (rx_data > '6' )) && rx_size != 0)
    {
        MSS_UART_polled_tx_string( &g_mss_uart0, (const uint8_t *)"\r\nInvalid action.  Please try again...");
    }
    else if(rx_size != 0)
    {
        action_code = rx_data;
    }
    else
    {
    }
    return;
}

/*------------------------------------------------------------------------------
 *
 */

void press_any_key(void)
{
    uint8_t rx_size = 0;
    uint8_t rx_data = 0;

    MSS_UART_polled_tx_string(&g_mss_uart0, (const uint8_t *)"\r\nPress any key to continue...");
    do {
        rx_size = MSS_UART_get_rx(&g_mss_uart0, &rx_data,1);
    } while(rx_size == 0);

    MSS_UART_polled_tx_string(&g_mss_uart0, (const uint8_t *)"\r\n---------------------------------------------------------------------- \r\n" );
    MSS_UART_polled_tx (&g_mss_uart0, tx1_data,sizeof(tx1_data));
    do {
        rx_size = MSS_UART_get_rx(&g_mss_uart0, &rx_data,1);
    } while(rx_size == 0);

    action_code = rx_data;
    return;
}

/*------------------------------------------------------------------------------
  Details about this Project
 */
void display_help(void)
{
    MSS_UART_polled_tx_string(&g_mss_uart0, (const uint8_t *)"\r\n\r\n************************** SmartFusion2 ISP USB example ************************");
    MSS_UART_polled_tx_string(&g_mss_uart0, (const uint8_t *)"\n\rThe purpose of this application is to demonstrate how to perform programming\r\n system services.");
    MSS_UART_polled_tx_string(&g_mss_uart0, (const uint8_t *)"\n\rThe data is retrieved from from SPI memory device connected to SPI0 port.\r\n");
    MSS_UART_polled_tx_string(&g_mss_uart0, (const uint8_t *)"\r\nAvailable services:");
    MSS_UART_polled_tx_string(&g_mss_uart0, (const uint8_t *)"\r\n   1. Scan Files: -- Display .spi files available in root directory of the drive.");
    MSS_UART_polled_tx_string(&g_mss_uart0, (const uint8_t *)"\r\n   2. Get file name: -- Provide file name to program.");
    MSS_UART_polled_tx_string(&g_mss_uart0, (const uint8_t *)"\r\n   3. Authenticate action: -- Authenticate the bit stream.");
    MSS_UART_polled_tx_string(&g_mss_uart0, (const uint8_t *)"\r\n   4. Program action: -- Performs programming action.");
    MSS_UART_polled_tx_string(&g_mss_uart0, (const uint8_t *)"\r\n   5. Verify action: -- Performs verify action.");
    MSS_UART_polled_tx_string(&g_mss_uart0, (const uint8_t *)"\r\nNote: For programming and verification actions, the core is disabled and the\r\nMSS IOs are enter into Flash Freeze state unless otherwise specified in the\r\n design already programmed into the device.");
    MSS_UART_polled_tx_string(&g_mss_uart0, (const uint8_t *)"\r\n---------------------------------------------------------------------- \r\n");

    press_any_key();
    return;
}

/*------------------------------------------------------------------------------
  Converts Integer to Hex
 */

uint32_t int_to_hex_int
(
    uint32_t value,
    uint8_t * p_result,
    uint32_t result_size
)
{
    int nibble_idx, nb_nibbles;
    unsigned char conv_array[NB_NIBBLES_IN_INT];
    unsigned int uvalue;
    nibble_idx = 0;
    uvalue = (unsigned int)value;

    do {
         int nibble = uvalue & 0x0F;
         if (nibble < 10)
         {
             conv_array[nibble_idx] = nibble + '0';
         }
         else
         {
             conv_array[nibble_idx] = nibble  - 10 + 'A';
         }
         uvalue = (uvalue >> 4);
         nibble_idx++;
    } while ((nibble_idx < NB_NIBBLES_IN_INT) && (uvalue > 0));

    nb_nibbles = nibble_idx;
    for (nibble_idx = 0; (nibble_idx < nb_nibbles) && (nibble_idx < result_size) ;nibble_idx++ )
    {
        p_result[nibble_idx] = conv_array[nb_nibbles - nibble_idx - 1];
    }
    return nibble_idx;
}

